(function (exports) {
  'use strict';

  // Timer class constructor function
  function Timer() {
    // Timer obtain current time in seconds method
    const getTime = () => {
      const date = new Date();
      let t = date.getMilliseconds() / 1000.0 + date.getSeconds() + date.getMinutes() * 60;
      return t;
    };

    // Timer response method
    this.response = (tag_id = null) => {
      let t = getTime();
      // Global time
      this.globalTime = t;
      this.globalDeltaTime = t - this.oldTime;
      // Time with pause
      if (this.isPause) {
        this.localDeltaTime = 0;
        this.pauseTime += t - this.oldTime;
      } else {
        this.localDeltaTime = this.globalDeltaTime;
        this.localTime = t - this.pauseTime - this.startTime;
      }
      // FPS
      this.frameCounter++;
      if (t - this.oldTimeFPS > 3) {
        this.FPS = this.frameCounter / (t - this.oldTimeFPS);
        this.oldTimeFPS = t;
        this.frameCounter = 0;
        if (tag_id != null) document.getElementById(tag_id).innerHTML = this.getFPS();
      }
      this.oldTime = t;
    };

    // Fill timer global data
    this.globalTime = this.localTime = getTime();
    this.globalDeltaTime = this.localDeltaTime = 0;

    // Fill timer semi global data
    this.startTime = this.oldTime = this.oldTimeFPS = this.globalTime;
    this.frameCounter = 0;
    this.isPause = false;
    this.FPS = 30.0;
    this.pauseTime = 0;
    return this;
  } // End of 'Timer' function

  const canvas = document.getElementById("glCanvas");
  //canvas = document.querySelector("#glCanvas");
  window.gl = canvas.getContext("webgl2"); //<------------
  let gl$1 = window.gl; //<------------

  class _buffer {
    constructor(type, size, bindPoint) {
      this.id = 0;
      this.type = type;
      this.bindPoint = bindPoint;
      this.size = size;
      this.id = gl$1.createBuffer();
      gl$1.bindBuffer(this.type, this.id);
      gl$1.bufferData(this.type, size, gl$1.STATIC_DRAW);
    }
    updateFloat(data) {
      gl$1.bindBuffer(this.type, this.id);
      gl$1.bufferData(this.type, new Float32Array(data), gl$1.STATIC_DRAW);
    }
    updateUint(data) {
      gl$1.bindBuffer(this.type, this.id);
      gl$1.bufferData(this.type, new Uint16Array(data), gl$1.STATIC_DRAW);
    }
  }
  function buffer(...args) {
    return new _buffer(...args);
  }

  class _vec3 {
    addMethod(obj, name, func) {
      let old = obj[name];
      obj[name] = (...args) => {
        if (func.length == args.length) return func.apply(obj, args);else if (typeof old == 'function') return old.apply(obj, args);
      };
    }
    constructor(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
    }
    set() {
      let res = new _vec3(this.x, this.y, this.z);
      return res;
    }
    set1(a) {
      this.x = a;
      this.y = a;
      this.z = a;
      return this;
    }
    add2(other) {
      this.x += other.x;
      this.y += other.y;
      this.z += other.z;
      return this;
    }
    add3(other1, other2) {
      this.x += other1.x + other2.x;
      this.y += other1.y + other2.y;
      this.z += other1.z + other2.z;
      return this;
    }
    sub(other) {
      let res = new _vec3(this.x - other.x, this.y - other.y, this.z - other.z);
      return res;
    }
    mulNum(a) {
      this.x *= a;
      this.y *= a;
      this.z *= a;
      return this;
    }
    dot(other) {
      return this.x * other.x + this.y * other.y + this.z * other.z;
    }
    cross(other) {
      let res = vec3(0, 0, 0);
      res.x = this.y * other.z - this.z * other.y;
      res.y = this.z * other.x - this.x * other.z;
      res.z = this.x * other.y - this.y * other.x;
      return res;
    }
    len2() {
      return this.dot(this);
    }
    normalise() {
      let len2 = this.len2();
      if (len2 == 1 || len2 == 0) return this;
      return this.mulNum(1.0 / Math.sqrt(len2));
    }
    toArray() {
      return [this.x, this.y, this.z];
    }
  }
  function vec3(...args) {
    return new _vec3(...args);
  }

  class _mat4 {
    constructor(m = null) {
      if (m != null && m != undefined && typeof m == 'object') {
        if (m.length == 4) this.m = m;else this.m = m.m;
      } else this.m = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    }
    transpose() {
      return this.m = [[this.m[0][0], this.m[1][0], this.m[2][0], this.m[3][0]], [this.m[0][1], this.m[1][1], this.m[2][1], this.m[3][1]], [this.m[0][2], this.m[1][2], this.m[2][2], this.m[3][2]], [this.m[0][3], this.m[1][3], this.m[2][3], this.m[3][3]]];
    }
    translate(vec = vec3(0, 0, 0)) {
      this.m = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [vec.x, vec.y, vec.z, 1]];
      return this;
    }
    scale(vec = vec3(1, 1, 1)) {
      this.m = [[vec.x, 0, 0, 0], [0, vec.y, 0, 0], [0, 0, vec.z, 0], [0, 0, 0, 1]];
      return this;
    }
    rotate(aid, vec) {
      let air = aid * (Math.PI / 180.0),
        s = Math.sin(air),
        c = Math.cos(air);
      vec.normalise();
      this.m = [[c + vec.x * vec.x * (1 - c), vec.x * vec.y * (1 - c) + vec.z * s, vec.x * vec.z * (1 - c) - vec.y * s, 0], [vec.y * vec.x * (1 - c) - vec.z * s, c + vec.y * vec.y * (1 - c), vec.y * vec.z * (1 - c) + vec.x * s, 0], [vec.z * vec.x * (1 - c) + vec.y * s, vec.z * vec.y * (1 - c) - vec.x * s, c + vec.z * vec.z * (1 - c), 0], [0, 0, 0, 1]];
      return this;
    }
    mul(other) {
      let mat = mat4(null);
      for (let i = 0; i < 4; i++) for (let j = 0; j < 4; j++) {
        mat.m[i][j] = 0;
        for (let k = 0; k < 4; k++) mat.m[i][j] += this.m[i][k] * other.m[k][j];
      }
      this.m = mat.m;
      return this;
    }
    /*
        setRotate(AngleInDegree, R) {
          let a = AngleInDegree * Math.PI / 180.0, sine = Math.sin(a), cosine = Math.cos(a);
          let x = 0, y = 0, z = 1;
          if (typeof R == 'object')
            if (R.length == 3)
              x = R[0], y = R[1], z = R[2];
            else
              x = R.x, y = R.y, z = R.z;
          // Vector normalize
          let len = x * x + y * y + z * z;
          if (len != 0 && len != 1)
            len = Math.sqrt(len), x /= len, y /= len, z /= len;
          this.m[0][0] = cosine + x * x * (1 - cosine);
          this.m[0][1] = x * y * (1 - cosine) + z * sine;
          this.m[0][2] = x * z * (1 - cosine) - y * sine;
          this.m[0][3] = 0;
          this.m[1][0] = y * x * (1 - cosine) - z * sine;
          this.m[1][1] = cosine + y * y * (1 - cosine);
          this.m[1][2] = y * z * (1 - cosine) + x * sine;
          this.m[1][3] = 0;
          this.m[2][0] = z * x * (1 - cosine) + y * sine;
          this.m[2][1] = z * y * (1 - cosine) - x * sine;
          this.m[2][2] = cosine + z * z * (1 - cosine);
          this.m[2][3] = 0;
          this.m[3][0] = 0;
          this.m[3][1] = 0;
          this.m[3][2] = 0;
          this.m[3][3] = 1;
          return this;
        } // End of 'setRotate' function
    
        rotate(AngleInDegree, R) {
          return this.mul(mat4().setRotate(AngleInDegree, R));
        } // End of 'rotate' function
    */
    determ3(a11, a12, a13, a21, a22, a23, a31, a32, a33) {
      return a11 * a22 * a33 + a12 * a23 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 - a13 * a22 * a31;
    }
    determ4() {
      return + +this.m[0][0] * this.determ3(this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) + -this.m[0][1] * this.determ3(this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) + +this.m[0][2] * this.determ3(this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) + -this.m[0][3] * this.determ3(this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]);
    }
    inverse() {
      let det = this.determ4();
      let r = new _mat4();
      if (det == 0) return _mat4(null);

      /* build adjoint matrix */
      r.m[0][0] = +this.determ3(this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
      r.m[1][0] = -this.determ3(this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
      r.m[2][0] = +this.determ3(this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
      r.m[3][0] = -this.determ3(this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
      r.m[0][1] = -this.determ3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
      r.m[1][1] = +this.determ3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
      r.m[2][1] = -this.determ3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
      r.m[3][1] = +this.determ3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
      r.m[0][2] = +this.determ3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[1][1], this.m[1][2], this.m[1][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
      r.m[1][2] = -this.determ3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[1][0], this.m[1][2], this.m[1][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
      r.m[2][2] = +this.determ3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[1][0], this.m[1][1], this.m[1][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
      r.m[3][2] = -this.determ3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[1][0], this.m[1][1], this.m[1][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
      r.m[0][3] = -this.determ3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3]) / det;
      r.m[1][3] = +this.determ3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3]) / det;
      r.m[2][3] = -this.determ3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3]) / det;
      r.m[3][3] = +this.determ3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2]) / det;
      return r;
    }
    toArray() {
      return [this.m[0][0], this.m[0][1], this.m[0][2], this.m[0][3], this.m[1][0], this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][2], this.m[3][3]];
    }
  }
  function mat4(...args) {
    return new _mat4(...args);
  }

  class _camera {
    constructor() {
      // Projection properties
      this.projSize = 0.1; // Project plane fit square                    
      this.projDist = 0.1; // Distance to project plane from viewer (near)
      this.projFarClip = 1800; // Distance to project far clip plane (far)    

      // Local size data
      this.frameW = 30; // Frame width
      this.frameH = 30; // Frame height

      // Matrices
      this.matrView = mat4(); // View coordinate system matrix
      this.matrProj = mat4(); // Projection coordinate system matrix
      this.matrVP = mat4(); // View and projection matrix precalculate value

      // Set camera default settings
      this.loc = vec3(0, 0, 8); // Camera location       
      this.at = vec3(0, 0, 0); // Camera destination    
      this.dir = vec3(0, 0, -1); // Camera Direction      
      this.up = vec3(0, 1, 0); // Camera UP direction   
      this.up1 = vec3(0, 1, 0); // Camera UP direction   
      this.right = vec3(1, 0, 0); // Camera RIGHT direction
      this.setDef();
    } // End of 'constructor' function

    // Camera parmeters setting function
    set(loc, at, up1) {
      this.matrView = this.view(loc, at, up1);
      this.dir.set(-this.matrView.m[0][2], -this.matrView.m[1][2], -this.matrView.m[2][2]);
      this.up.set(this.matrView.m[0][1], this.matrView.m[1][1], this.matrView.m[2][1]);
      this.right.set(this.matrView.m[0][0], this.matrView.m[1][0], this.matrView.m[2][0]);
      this.matrVP = mat4(this.matrView).mul(this.matrProj);
    } // End of 'set' function

    view(loc, at, up1) {
      let dir = at.sub(loc).normalise();
      let right = dir.cross(up1).normalise();
      let up = right.cross(dir);
      let v = mat4(null);
      v.m = [[right.x, up.x, -dir.x, 0], [right.y, up.y, -dir.y, 0], [right.z, up.z, -dir.z, 0], [-loc.dot(right), -loc.dot(up), loc.dot(dir), 1]];
      return v;
    }
    ortho(left, right, bottom, top, near, far) {
      let o = mat4(null);
      o.m = [[2 / (right - left), 0, 0, 0], [0, 2 / (top - bottom), 0, 0], [0, 0, 2 / (near - far), 0], [-(right + left) / (right - left), -(top + bottom) / (top - bottom), (near + far) / (near - far), 1]];
      return o;
    }
    //frustum
    frustum(left, right, bottom, top, near, far) {
      let f = mat4(null);
      f.m = [[2 * near / (right - left), 0, 0, 0], [0, 2 * near / (top - bottom), 0, 0], [(right + left) / (right - left), (top + bottom) / (top - bottom), (near + far) / (near - far), -1], [0, 0, -2 * near * far / (far - near), 0]];
      return f;
    }

    // Projection parameters setting function.
    setProj(projSize, projDist, projFarClip) {
      let rx = projSize,
        ry = projSize;
      this.projDist = projDist;
      this.projSize = projSize;
      this.projFarClip = projFarClip;

      // Correct aspect ratio
      if (this.frameW > this.frameH) rx *= this.frameW / this.frameH;else ry *= this.frameH / this.frameW;
      this.matrProj = this.frustum(-rx / 2.0, rx / 2.0, -ry / 2.0, ry / 2.0, projDist, projFarClip);
      this.matrView = this.view(this.loc, this.at, this.up1);
      // pre-calculate view * proj matrix
      this.matrVP = mat4(this.matrView).mul(this.matrProj);
    } // End of 'setProj' function

    // Resize camera and projection function.
    setSize(frameW, frameH) {
      if (frameW < 1) frameW = 1;
      if (frameH < 1) frameH = 1;
      this.frameW = frameW;
      this.frameH = frameH;
      // Reset projection with new render window size
      this.setProj(this.projSize, this.projDist, this.projFarClip);
    } // End of 'setSize' function

    // Camera set default values function.
    setDef() {
      this.loc.set(0, 5, 8);
      this.at.set(0, 0, 0);
      this.up1.set(0, 1, 0);
      this.projDist = 0.1;
      this.projSize = 0.1;
      this.projFarClip = 1800;
      this.frameW = 30;
      this.frameH = 30;
      this.set(this.loc, this.at, this.up1);
      this.setProj(this.projSize, this.projDist, this.projFarClip);
      this.setSize(this.frameW, this.frameH);
    } // End of 'setDef' function
  } // End of 'camera' class

  function camera(...args) {
    return new _camera(...args);
  } // End of 'mat4' function

  let gl = window.gl;
  let vB = 0,
    iB = 1;
  class _prim {
    constructor(Vert, Ind) {
      this.vBufID = buffer(gl.ARRAY_BUFFER, Vert.length * 4, vB);
      this.vBufID.updateFloat(Vert);
      this.iBufID = buffer(gl.ELEMENT_ARRAY_BUFFER, Ind.length * 2, iB);
      this.iBufID.updateUint(Ind);
      this.uboMatrID = mat4();
      this.type = gl.TRIANGLES; // gl.LINE_STRIP;
      this.minBB = vec3(0, 0, 0);
      this.maxBB = vec3(0, 0, 0);
      this.numofElems = Ind.length;
      this.trans = mat4();
    }
    draw() {
      if (this.vA == null) {
        this.vA = gl.createVertexArray();
        gl.bindVertexArray(this.vA);
        gl.vertexAttribPointer(exports.posloc, 3, gl.FLOAT, false, 24, 0);
        gl.vertexAttribPointer(exports.normloc, 3, gl.FLOAT, false, 24, 12);
        gl.enableVertexAttribArray(exports.posloc);
        gl.enableVertexAttribArray(exports.normloc);
      }
      gl.bindVertexArray(this.vA);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.iBufID.id);
      gl.drawElements(this.type, this.numofElems, gl.UNSIGNED_SHORT, 0);
    }
  }
  function prim(...args) {
    return new _prim(...args);
  }

  let getN = (P0, P1, P2) => P1.sub(P0).cross(P2.sub(P0)).normalise();
  function createCube() {
    let size = 2 * Math.sqrt(5) / 15;
    let cu_v = [vec3(-size, size, size), vec3(size, size, size), vec3(size, -size, size), vec3(-size, -size, size), vec3(-size, size, -size), vec3(size, size, -size), vec3(size, -size, -size), vec3(-size, -size, -size)];

    /*let cu_v = [
        -size, size, size,
        size, size, size,
        size, -size, size,
        -size, -size, size,
        -size, size, -size,
        size, size, -size,
        size, -size, -size,
        -size, -size, -size
    ];
    let cube_index = [
        0, 2, 1,
        0, 3, 2,
        1, 6, 5,
        1, 2, 6,
        5, 7, 4,
        5, 6, 7,
        4, 3, 0,
        4, 7, 3,
        4, 1, 0,
        4, 5, 1,
        6, 3, 2,
        6, 7, 3]; */

    let cu_f = [[0, 3, 2, 1], [1, 2, 6, 5], [5, 6, 7, 4], [4, 7, 3, 0], [4, 0, 1, 5], [2, 3, 7, 6]];
    let cu_i = [];
    let cube_norm = [vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0)];
    cu_f.forEach(fi => {
      let N = getN(cu_v[fi[0]], cu_v[fi[1]], cu_v[fi[2]]);
      cube_norm[fi[0]].add2(N);
      cube_norm[fi[1]].add2(N);
      cube_norm[fi[2]].add2(N);
      cube_norm[fi[3]].add2(N);
      cu_i = cu_i.concat([fi[0], fi[2], fi[3], fi[0], fi[1], fi[2]]);
    });
    let v = [];
    for (let i = 0; i < cu_v.length; i++) {
      v[i] = cu_v[i].toArray().concat(cube_norm[i].normalise().toArray());
    }
    v = v[0].concat(v[1], v[2], v[3], v[4], v[5], v[6], v[7]);
    let cube = prim(v, cu_i);
    return cube;
  }
  function createOcta() {
    let size = 0.5;
    let oc_v = [vec3(0, size, 0), vec3(0, 0, -size), vec3(size, 0, 0), vec3(0, 0, size), vec3(-size, 0, 0), vec3(0, -size, 0)];
    let octa_index = [4, 0, 1, 1, 0, 2, 5, 1, 2,
    //
    5, 4, 1,
    //
    5, 3, 4,
    //.
    5, 2, 3,
    //
    2, 0, 3, 3, 0, 4];
    /*
        octa_index = [
            0, 4, 1,
            0, 1, 2,
            0, 4, 1,
            0, 4, 1,
            0, 4, 1,
            0, 4, 1,
            0, 2, 3,
            0, 3, 4
        ];    
    */
    let octa_norm = [vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0)];
    for (let i = 0; i < octa_index.length; i += 3) {
      let N = getN(oc_v[octa_index[i]], oc_v[octa_index[i + 1]], oc_v[octa_index[i + 2]]);
      octa_norm[octa_index[i]].add2(N);
      octa_norm[octa_index[i + 1]].add2(N);
      octa_norm[octa_index[i + 2]].add2(N);
    }
    let v = [];
    for (let i = 0; i < oc_v.length; i++) {
      v = v.concat(oc_v[i].toArray().concat(octa_norm[i].normalise().toArray()));
    }
    let octa = prim(v, octa_index);
    octa.trans.translate(vec3(0, 0.7, 0));
    return octa;
  }
  function createTetra() {
    let a = Math.sqrt(2) / 3,
      b = Math.sqrt(6) / 3,
      s = 0.5;
    let te_v = [vec3(0, s, 0), vec3(0, -1 / 3 * s, 2 * a * s), vec3(b * s, -1 / 3 * s, -a * s), vec3(-b * s, -1 / 3 * s, -a * s)];
    let tetra_index = [0, 3, 1, 0, 1, 2, 0, 2, 3, 2, 1, 3];
    let tetra_norm = [vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0)];
    for (let i = 0; i < tetra_index.length; i += 3) {
      let N = getN(te_v[tetra_index[i]], te_v[tetra_index[i + 1]], te_v[tetra_index[i + 2]]);
      tetra_norm[tetra_index[i]].add2(N);
      tetra_norm[tetra_index[i + 1]].add2(N);
      tetra_norm[tetra_index[i + 2]].add2(N);
    }
    let v = [];
    for (let i = 0; i < te_v.length; i++) {
      v = v.concat(te_v[i].toArray().concat(tetra_norm[i].normalise().toArray()));
    }
    let octa = prim(v, tetra_index);
    octa.trans.translate(vec3(0, 0.7, 0));
    return octa;
  }

  var vert = "#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nin vec3 in_pos;in vec3 in_norm;uniform mat4 MatrWVP;uniform float Time;out vec3 draw_pos;out vec3 draw_norm;void main(){float a=Time;gl_Position=MatrWVP*vec4(in_pos,1.0);vec3 norm=(in_norm+vec3(1.0,1.0,1.0))/2.0;draw_norm=vec3(pow(norm.x,2.2),pow(norm.y,2.2),pow(norm.z,2.2));draw_pos=(MatrWVP*vec4(in_pos,1.0)).xyz;}"; // eslint-disable-line

  var frag = "#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nout vec4 o_color;in vec3 draw_pos;in vec3 draw_norm;uniform float Time;uniform float ColorCoefR,ColorCoefG,ColorCoefB;float maximum(float a,float b){if(a>b)return a;else return b;}vec3 Shade(vec3 P,vec3 N){vec3 L=normalize(vec3(1.0,2.0,3.0));vec3 LC=vec3(1.0,1.0,1.0);vec3 color=vec3(0.0);vec3 V=normalize(P-vec3(1.0,1.0,1.0));vec3 a=vec3(0.5,0.5,0.5);color=vec3(0.25,0.20725,0.20725);N=faceforward(-N,V,N);float dotNL=dot(N,L);if(dotNL<0.0)dotNL=0.0;color+=dotNL*vec3(1.0,0.829,0.829)*a*LC;vec3 R=reflect(V,N);float dotRL=dot(R,L);if(dotRL<0.0)dotRL=0.0;color+=pow(dotRL,11.264)*vec3(0.296648,0.296648,0.296648)*LC;return color;}void main(){o_color=vec4(mix(vec3(ColorCoefR,ColorCoefG,ColorCoefB),draw_norm.yyy,0.5),1.0);if(draw_pos.x==0.0)o_color=vec4(1.0,1.0,1.0,1.0);o_color.x=pow(o_color.x,2.2);o_color.y=pow(o_color.y,2.2);o_color.z=pow(o_color.z,2.2);}"; // eslint-disable-line

  //import * as polygons from './pg.js'

  // Global context data
  //let canvas, gl;
  let time_loc = -2,
    myTimer;
  let wvp_loc = -2,
    matWVP = mat4();
  let frameBuffer,
    frameData = [0, 0, 0, 0],
    prim1,
    prim2,
    prim3;
  const frameUniformBufferIndex = 1;
  let ShaderProgram;
  let mbCamera;
  exports.posloc = 0;
    exports.normloc = 1;
  function LoadShader(gl, type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      const Buf = gl.getShaderInfoLog(shader);
      console.log(Buf);
      alert('fail');
    }
    return shader;
  }
  /*
  async function fetchShader(shaderURL) {
      try {
          const response = await fetch(shaderURL);
          const text = await response.text();

          console.log(text);
      } catch(err) {
          console.error(err);
      }
  }*/

  function Pause(tag) {
    myTimer.isPause = tag.checked ? true : false;
  }
  function initGL() {
    //let colorCoefR = 1.0, colorCoefG = 1.0, colorCoefB = 1.0;
    //debugger;
    const canvas = document.getElementById("glCanvas");
    //canvas = document.querySelector("#glCanvas");
    window.gl = canvas.getContext("webgl2");
    let gl = window.gl; //<-------------

    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    myTimer = new Timer();
    mbCamera = camera();
    // Shader initialization
    // Shaders
    const vertexSh = LoadShader(gl, gl.VERTEX_SHADER, vert);
    const fragSh = LoadShader(gl, gl.FRAGMENT_SHADER, frag);
    ShaderProgram = gl.createProgram();
    gl.attachShader(ShaderProgram, vertexSh);
    gl.attachShader(ShaderProgram, fragSh);
    gl.linkProgram(ShaderProgram);
    if (!gl.getProgramParameter(ShaderProgram, gl.LINK_STATUS)) {
      const Buf = gl.getProgramInfoLog(ShaderProgram);
      console.log(Buf);
    }
    exports.posloc = gl.getAttribLocation(ShaderProgram, "in_pos");
    exports.normloc = gl.getAttribLocation(ShaderProgram, "in_norm");

    // let frameVertexArray = gl.createVertexArray();
    // gl.bindVertexArray(frameVertexArray);
    const pos = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];
    const posBuf = buffer(gl.ARRAY_BUFFER, pos.length * 4, 0);
    posBuf.updateFloat(pos);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.clearColor(0.85, 0.8, 0.96, 1);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LEQUAL);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.useProgram(ShaderProgram);
    time_loc = gl.getUniformLocation(ShaderProgram, "Time");
    gl.uniform1f(time_loc, myTimer.localTime);
    let rot = mat4(null).rotate(myTimer.localTime, vec3(0, 0, 0));
    matWVP = mbCamera.matrVP.mul(rot);
    wvp_loc = gl.getUniformLocation(ShaderProgram, "MatrWVP");
    frameData = new Float32Array(matWVP.toArray());
    gl.uniformMatrix4fv(wvp_loc, false, frameData); //new Float32Array(matWVP)); 

    frameBuffer = buffer(gl.UNIFORM_BUFFER, frameData.length * 4, frameUniformBufferIndex);
    frameBuffer.updateFloat(frameData);
    prim1 = createOcta();
    prim1.draw();
    prim2 = createCube();
    prim2.draw();
    prim3 = createTetra();
    prim3.draw();
    mbCamera.set(vec3(2, 2, 2), vec3(0, 0, 0), vec3(0, 1, 0));
  }
  function cameraRotate() {
    let xR = document.getElementById('camRX').value,
      yR = document.getElementById('camRY').value,
      zR = document.getElementById('camRZ').value;
    let matrW = mat4(null);
    if (xR != 0) {
      matrW = matrW.mul(mat4(null).rotate(xR, vec3(1, 0, 0)));
    }
    if (yR != 0) {
      matrW = matrW.mul(mat4(null).rotate(yR, vec3(0, 1, 0)));
    }
    if (zR != 0) {
      matrW = matrW.mul(mat4(null).rotate(zR, vec3(0, 0, 1)));
    }
    return matrW;
  }
  function Render() {
    let colorCoefR = 1.0,
      colorCoefG = 1.0,
      colorCoefB = 1.0;
    if (time_loc == -2) return;
    if (myTimer != undefined) myTimer.response(null);
    let gl = window.gl;
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    time_loc = gl.getUniformLocation(ShaderProgram, "Time");
    gl.uniform1f(time_loc, myTimer.localTime);
    colorCoefR = document.getElementById('colorcoefr').value;
    time_loc = gl.getUniformLocation(ShaderProgram, "ColorCoefR");
    gl.uniform1f(time_loc, colorCoefR);
    colorCoefG = document.getElementById('colorcoefg').value;
    time_loc = gl.getUniformLocation(ShaderProgram, "ColorCoefG");
    gl.uniform1f(time_loc, colorCoefG);
    colorCoefB = document.getElementById('colorcoefb').value;
    time_loc = gl.getUniformLocation(ShaderProgram, "ColorCoefB");
    gl.uniform1f(time_loc, colorCoefB);
    let rot = new cameraRotate();
    wvp_loc = gl.getUniformLocation(ShaderProgram, "MatrWVP");

    //matWVP = mat4(null);
    matWVP = mat4(null).mul(rot).mul(mbCamera.matrVP);

    //matWVP = mat4(null);
    frameData = matWVP.toArray();
    gl.uniformMatrix4fv(wvp_loc, false, frameData); //new Float32Array(matWVP)); 

    gl.bindBuffer(gl.UNIFORM_BUFFER, frameBuffer.id);
    gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(frameData), gl.STATIC_DRAW);
    prim1.draw();
    let tr = new mat4(null).translate(vec3(-2, 2 * Math.abs(Math.sin(myTimer.localTime)), 0));
    let cubeWVP = mat4(mbCamera.matrVP);

    //cubeWVP.mul(rot).mul(tr).mul(mbCamera.matrVP);

    //cubeWVP.mul(tr);
    cubeWVP = mat4(rot).mul(tr).mul(cubeWVP);
    //matWVP = mbCamera.matrVP.mul(tr).mul(rot);
    frameData = cubeWVP.toArray();
    gl.uniformMatrix4fv(wvp_loc, false, frameData); //new Float32Array(matWVP)); 
    gl.bindBuffer(gl.UNIFORM_BUFFER, frameBuffer.id);
    gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(frameData), gl.STATIC_DRAW);
    prim2.draw();
    let tr1 = new mat4(null).translate(vec3(1, 1.5 * Math.abs(Math.sin(myTimer.localTime * 1.5)), 0));
    let tWVP = mat4(mbCamera.matrVP);

    //cubeWVP.mul(rot).mul(tr).mul(mbCamera.matrVP);

    //cubeWVP.mul(tr);
    tWVP = mat4(rot).mul(tr1).mul(tWVP);
    //matWVP = mbCamera.matrVP.mul(tr).mul(rot);
    frameData = tWVP.toArray();
    gl.uniformMatrix4fv(wvp_loc, false, frameData); //new Float32Array(matWVP)); 
    gl.bindBuffer(gl.UNIFORM_BUFFER, frameBuffer.id);
    gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(frameData), gl.STATIC_DRAW);
    prim3.draw();
  }
  initGL();
  window.setInterval(Render, 10);

  exports.Pause = Pause;
  exports.Render = Render;
  exports.initGL = initGL;

  return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
